@page "/plan"
@inject CategoryDatabase CDatabase
@inject SalaryDatabase SDatabase
@inject IJSRuntime JS
@inject NavigationManager Navigation

<SectionContent SectionName="page-title">Plan</SectionContent>
<SectionContent SectionName="page-actions">
    <i class="bi bi-plus-lg h5 cursor-pointer m-0" @onclick="goToCategory"></i>
</SectionContent>

<div id="category-not-0" class="d-none">
    <div class="row justify-content-center">
        <div class="col-12 mx-auto">
            <div class="my-4">
                <div class="list-group list-group-flush">
                    @foreach (var item in cItems)
                    {
                        <div class="list-group-item">
                            <div class="d-flex justify-content-between pb-1">
                                <div>
                                    <strong class="mb-0">@item.Name</strong>
                                </div>
                                <div class="d-flex align-items-center">
                                    <div class="btn-group-sm">
                                        <button class="btn @(!item.FixedOrPerc ? "btn-primary" :  "btn-outline-primary")" @onclick='() => item.FixedOrPerc = false'><i class="bi bi-currency-dollar"></i></button>
                                        <button class="btn @(item.FixedOrPerc ? "btn-primary" :  "btn-outline-primary")" @onclick='() => item.FixedOrPerc = true'><i class="bi bi-percent"></i></button>
                                    </div>
                                </div>
                            </div>
                            <div class="row">                             
                                <div class="col">
                                    <div class="input-group">
                                        <span class="input-group-text"><i class="bi bi-currency-dollar"></i></span>
                                        <input type="number" disabled="@item.FixedOrPerc" class="form-control align-self-center" placeholder="Fixed amount" @bind-value="item.FixedAmount" @bind-value:event="oninput" @onchange="(e) => UpdatePercentage(item)" />
                                    </div>
                                </div>
                                <div class="col">
                                    <div class="input-group">
                                        <span class="input-group-text"><i class="bi bi-percent"></i></span>
                                        <input type="number" disabled="@(item.FixedOrPerc == false)" class="form-control align-self-center" placeholder="Percentage" @bind-value="item.Percentage" @bind-value:event="oninput" @onchange="(e) => UpdateFixedAmount(item)" min="0" max="100" />
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                    <div class="list-group-item">
                        <div class="row">
                            <div class="col">
                                <div id="totalPercentDiv" class="text-center @(totalPercent>100 ? "text-danger" : "text-success")">@cItems.Sum(i => i.FixedAmount) 
                                    @if(salary > 0)
                                    {
                                        <span>/ @salary</span>
                                    }
                                    <span><i class="bi bi-currency-dollar"></i></span>
                                </div>
                            </div>
                            <div class="col">
                                <div id="totalPercentDiv" class="text-center @(totalPercent>100 ? "text-danger" : "text-success")">@totalPercent <span><i class="bi bi-percent"></i></span></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="btn-float btn btn-primary" @onclick="UpdateItems">
        <i class="bi bi-check-lg"></i>
    </div>
</div>

<div id="category-is-0" class="d-none">
    <p class="m-4">
        It looks like no categories have been set up yet. You can create a new category <span class="text-primary cursor-pointer" @onclick="goToCategory"><strong><u>here</u></strong></span> to get started.
    </p>
</div>

@code {
    private List<FinPal.Models.Category> cItems = new List<FinPal.Models.Category>();
    private decimal totalPercent, salary;
    private DateTime today = DateTime.Now;

    protected override async Task OnInitializedAsync()
    {
        cItems = await CDatabase.GetActiveItemsAsync();
        salary = await SDatabase.GetSalaryByMonth(today.Year, today.Month);

        foreach (var item in cItems)
        {
            if(item.FixedAmount == 0 && item.Percentage > 0)
            {
                UpdateFixedAmount(item);
            }

            if (item.FixedOrPerc && salary > 0)  // False = FixedAmount , (True = Percentage)
            {
                UpdateFixedAmount(item);
            }
            else if (!item.FixedOrPerc && salary > 0) // (False = FixedAmount) , True = Percentage
            {
                UpdatePercentage(item);
            }
        }

        if(cItems.Count != 0)
        {
            CalculateTotalPercentage();
            await JS.InvokeVoidAsync("hideOrShowElement", "category-not-0");
        }
        else
        {
            await JS.InvokeVoidAsync("hideOrShowElement", "category-is-0");
        }
    }    

    private async Task UpdateItems()
    {
        foreach (var item in cItems)
        {
            await CDatabase.SaveItemAsync(item);
        }
        await JS.InvokeVoidAsync("showToast", "Update", "Plans updated successfully.");

    }

    private void UpdatePercentage(FinPal.Models.Category item)
    {
        if (salary > 0)
        {
            item.Percentage = (item.FixedAmount / salary) * 100;
        }
        CalculateTotalPercentage();
    }

    private void UpdateFixedAmount(FinPal.Models.Category item)
    {
        if (item.Percentage > 0 && salary > 0)
        {
            item.FixedAmount = (item.Percentage / 100) * salary;
        }
        CalculateTotalPercentage();
    }

    private void CalculateTotalPercentage()
    {
        totalPercent = cItems.Sum(item => item.Percentage);
    }

    private void goToCategory()
    {
        Navigation.NavigateTo("/settings/category");
    }
}
