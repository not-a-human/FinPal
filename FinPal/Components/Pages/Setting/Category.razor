@page "/settings/category"
@inject CategoryDatabase CDatabase
@inject NavigationManager Navigation
@inject IJSRuntime JS

<SectionContent SectionName="page-title">Settings</SectionContent>
<SectionContent SectionName="page-actions">
    <div class="d-flex h5 m-0"><i class="align-self-center bi bi-@(CreateForm ? "x": "plus")-lg cursor-pointer" @onclick="ToggleForm"></i></div>
</SectionContent>
<SectionContent SectionName="page-actions-1">
    <div @onclick='() => Navigation.NavigateTo("/settings")' class="h6 d-flex m-0"><span class="align-self-center cursor-pointer">Back</span></div>
</SectionContent>

<form class="@(CreateForm ? "" : "d-none")">
    <div class="mb-3 position-relative">
        <label for="name" class="form-label">Category Name</label>
        <div class="input-group">
            <span class="input-group-text"><i class="bi bi-bank2"></i></span>
            <input @ref="firstInput" type="text" class="form-control @(UIHelper.GetFormValidClass(isName,0))" required id="name" @bind="formModel.name" placeholder="Enter Category Name" />
        </div>
        <div class="invalid-tooltip @(UIHelper.GetFormValidClass(isName,1))">
            Please enter a name.
        </div>
    </div>

    <div class="mb-3">
        <label for="note" class="form-label col-md-2">Note</label>
        <div class="input-group">
            <span class="input-group-text"><i class="bi bi-card-text"></i></span>
            <textarea class="form-control" id="note" @bind="formModel.note" placeholder="Enter Note"></textarea>
        </div>
    </div>

    <div class="mb-3">
        <div class="form-check form-switch">
            <input class="form-check-input" type="checkbox" role="switch" id="active" @bind="formModel.active" />
            <label class="form-check-label" for="active">
                <i class="bi bi-toggles"></i>
            </label>
        </div>
    </div>

    <div class="d-grid gap-2 d-md-flex justify-content-md-end my-5">
        <button type="button" @onclick="createCategory" class="btn btn-primary">Submit</button>
        <button type="button" @onclick="cancelCategory" class="btn btn-primary">Cancel</button>
    </div>
</form>

<div class="@(!CreateForm ? "" : "d-none")">
    <div class="list-group list-group-flush">
        @foreach (var item in categoryList)
        {
            <div class="list-group-item d-flex justify-content-between">
                <div class="cursor-pointer flex-fill row" @onclick="() => updateCategory(item)">
                    <strong class="align-self-center col-12">@item.Name</strong>
                    @if (!string.IsNullOrEmpty(item.Note))
                    {
                        <p class="text-muted mb-0"><i class="bi bi-card-text"></i> <span>@item.Note</span></p>
                    }
                </div>
                <div class="d-flex">
                    <div class="btn btn-outline-@(item.Active ? "primary" : "danger") align-self-center border-0" @onclick="() => activeToggle(item)">
                        <i class="bi bi-toggle-@(item.Active ? "on" : "off") h2"></i>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {

    // 0 = none, 1 = not valid, 2 valid
    private int isName = 0;

    public int id = 0;
    private FormModel formModel = new FormModel();
    private List<FinPal.Models.Category> categoryList = new List<FinPal.Models.Category>();
    private ElementReference firstInput;

    private bool CreateForm = false;

    protected override async Task OnInitializedAsync()
    {
        categoryList = await CDatabase.GetItemsAsync();
    }

    private async Task createCategory()
    {
        isName = UIHelper.IsZeroEmpty(formModel.name);

        if (!string.IsNullOrWhiteSpace(formModel.name))
        {
            var category = new FinPal.Models.Category
                {
                    Id = id,
                    Name = formModel.name,
                    Note = formModel.note,
                    Active = formModel.active
                };
            await CDatabase.SaveItemAsync(category);

            categoryList = await CDatabase.GetItemsAsync();

            await JS.InvokeVoidAsync("showToast", "Saved", "Record saved successfully.");


            id = 0; formModel.name = ""; formModel.note = "";

        }

        await firstInput.FocusAsync();

    }

    private async void activeToggle(Models.Category item)
    {
        await CDatabase.ToggleItemAsync(item);

    }

    private async void updateCategory(Models.Category item)
    {
        CreateForm = true;
        id = item.Id;
        formModel.name = item.Name;
        formModel.note = item.Note;
        formModel.active = item.Active;
        await firstInput.FocusAsync();
    }

    private async void cancelCategory()
    {
        ToggleForm();

        id = 0; formModel.name = ""; formModel.note = "";
    }

    private void ToggleForm()
    {
        CreateForm = !CreateForm;
    }

    private class FormModel()
    {
        public string name { get; set; } = "";
        public string note { get; set; } = "";
        public bool active { get; set; } = true;
    }
}
