@inject SettingsDatabase SettingDatabase
@inject BillDatabase BDatabase
@inject CategoryDatabase CDatabase
@inject FinanceNameDatabase FDatabase
@inject SalaryDatabase SDatabase
@inject NavigationManager Navigation
@inject ExcelDataHelper ExcelHelper
@inject IJSRuntime JS

@page "/settings"

<SectionContent SectionName="page-title">Settings</SectionContent>
<SectionContent SectionName="page-actions">
    <i class="bi bi-question-lg h5 cursor-pointer m-0 px-2" onclick="helpFileToggle()"></i>
</SectionContent>

<div class="container" id="settings">
    <div class="row justify-content-center">
        <div class="col-12 mx-auto">
            <div class="my-4">
                <strong class="mb-0">System Data</strong>
                <p>Add or update the system data.</p>

                <div class="list-group mb-5 shadow">

                    <div class="list-group-item list-group-item-action cursor-pointer" @onclick='() => Navigation.NavigateTo("settings/category")'>
                        <div class="align-items-center">
                            <strong class="mb-0">Categories</strong>
                            <p class="text-muted mb-0">Add/Update categories.</p>
                        </div>
                    </div>

                    <div class="list-group-item list-group-item-action cursor-pointer" @onclick='() => Navigation.NavigateTo("settings/finance")'>
                        <div class="lign-items-center">
                            <strong class="mb-0">Finance Name</strong>
                            <p class="text-muted mb-0">Add/Update finance names.</p>
                        </div>
                    </div>
                   
                </div>

                <hr class="my-4" />
                <strong class="mb-0">UI Customization</strong>
                <p>Personalize the appearance of the application.</p>

                <div class="list-group mb-5 shadow">
                    <div class="list-group-item list-group-item-action cursor-pointer" @onclick="updateUIMode">
                        <div class="align-items-center">
                            <strong class="mb-0">Dark/Light Mode</strong>
                            <p class="text-muted mb-0">Toggle between dark and light modes.</p>
                        </div>
                    </div>
                    <div class="list-group-item list-group-item-action cursor-pointer" @onclick='() => Navigation.NavigateTo("settings/color")'>
                        <div class="align-items-center">
                            <strong class="mb-0">Customise Colours</strong>
                            <p class="text-muted mb-0">Adjust the application's colour scheme to your preference.</p>
                        </div>
                    </div>
                </div>

                <hr class="my-4" />
                <strong class="mb-0">Export/Import Data</strong>
                <p>Export or import all data.</p>

                <div class="list-group mb-5 shadow">
                    <div class="list-group-item list-group-item-action cursor-pointer" @onclick="generateReport">
                        <div class="align-items-center">
                            <strong class="mb-0">Generate Report</strong>
                            <p class="text-muted mb-0">Generate a report. - Still under development.</p>
                        </div>
                    </div>
                    <div class="list-group-item list-group-item-action cursor-pointer" @onclick="exportData">
                        <div class="align-items-center">
                            <strong class="mb-0">Export Data</strong>
                            <p class="text-muted mb-0">Export all data to an Excel file.</p>
                        </div>
                    </div>
                    <div class="list-group-item list-group-item-action cursor-pointer" @onclick="importData">
                        <div class="align-items-center">
                            <strong class="mb-0">Import Data</strong>
                            <p class="text-muted mb-0">Existing data will be erased before importing the new data.</p>
                        </div>
                    </div>
                </div>

                <hr class="my-4" />
                <strong class="mb-0">Tester Function</strong>
                <p>Only available during the testing period.</p>

                <div class="list-group mb-5 shadow">
                    <div class="list-group-item list-group-item-action cursor-pointer" onclick="customModalToggle()">
                        <div class="lign-items-center">
                            <strong class="mb-0">Delete All Data</strong>
                            <p class="text-muted mb-0">Please perform this after an update.</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<SectionContent SectionName="custom-modal-title">Delete All Data</SectionContent>
<SectionContent SectionName="custom-modal-body">
    <p class="card-text">
                    Are you sure you want to proceed with data deletion? This action is permanent and cannot be undone.
    </p>
    <p class="card-text">
                    @FinPal.Services.DatabaseHelper.GetDatabasePath("SinarSQLite.db3")
                </p>
    <div class="text-end mt-2">
        <button class="btn btn-primary" @onclick="DeleteData">Yes</button>
        <button class="btn btn-secondary" onclick="customModalToggle()">No</button>
</div>
</SectionContent>

<SectionContent SectionName="help-title">Settings</SectionContent>
<SectionContent SectionName="help-body">
    <p class="card-text">This page allows you to configure FinPal.</p>
    <hr />
    <h5 class="card-title">Categories</h5>
    <p class="card-text">
        Create or update Categories here.
    </p>
    <hr />
    <h5 class="card-title">Finance Name</h5>
    <p class="card-text">
        Create or update a Finance Name. Ensure that a Category is set up before adding a Finance Name.
    </p>
    <hr />
    <h5 class="card-title">Dark/Light Mode</h5>
    <p class="card-text">
        Toggle between dark and light mode for the application view.
    </p>
    <hr />
    <h5 class="card-title">Generate Report</h5>
    <p class="card-text">
        Generate an Excel report for personal review.
    </p>
    <hr />
    <h5 class="card-title">Export Data</h5>
    <p class="card-text">
        Export all your data to an Excel file for backup or restoration on another device.
    </p>
    <hr />
    <h5 class="card-title">Import Data</h5>
    <p class="card-text">
        Import data from a previously exported file.
    </p>
</SectionContent>

@code {
    private string? message;

    private async Task updateUIMode()
    {
        var result = await SettingDatabase.GetItemAsync("UIMode");
        result.SetStr = result.SetStr == "dark" ? "light" : "dark";
        await SettingDatabase.ChangeUIMode(result);
        await JS.InvokeVoidAsync("setTheme", result.SetStr);
    }

    private async void DeleteData()
    {
        CDatabase.DropTable();
        FDatabase.DropTable();
        SDatabase.DropTable();
        BDatabase.DropTable();
        await JS.InvokeVoidAsync("customModalToggle");
        await JS.InvokeVoidAsync("showAutoHideToast", "Data deleted.");
    }

    private async void exportData()
    {
        message = await ExcelHelper.ExportDataToExcel();
        await JS.InvokeVoidAsync("showToast", "Data Export", message);
    }

    private async void generateReport()
    {
        message = await ExcelHelper.GenerateExcelReport();
        await JS.InvokeVoidAsync("showToast", "Report Generation", message);
    }

    private async void importData()
    {

        var file = await FilePicker.PickAsync();

        if (file != null)
        {
            //DeleteData();

            using (var stream = await file.OpenReadAsync())
            {
                try
                {
                    await ExcelHelper.ImportDataFromExcel(stream);
                    message = "Data imported successfully!";
                }
                catch (Exception ex)
                {
                    message = $"Error importing data: {ex.Message}";
                }
            }
        }
        else
        {
            message = "No file selected.";
        }
        await JS.InvokeVoidAsync("showToast", "Data Import", message);
    }


   
}
