@inject SettingsDatabase SettingDatabase
@inject BillDatabase BDatabase
@inject CategoryDatabase CDatabase
@inject FinanceNameDatabase FDatabase
@inject SalaryDatabase SDatabase
@inject NavigationManager Navigation
@inject ExcelDataHelper ExcelHelper
@inject IJSRuntime JS

@page "/settings"

<SectionContent SectionName="page-title">Settings</SectionContent>

<div class="container" id="settings">
    <div class="row justify-content-center">
        <div class="col-12 mx-auto">
            <div class="my-4">
                <strong class="mb-0">System Data</strong>
                <p>Add or update the system data.</p>

                <div class="list-group mb-5 shadow">

                    <div class="list-group-item list-group-item-action cursor-pointer" @onclick='() => Navigation.NavigateTo("settings/category")'>
                        <div class="align-items-center">
                            <strong class="mb-0">Categories</strong>
                            <p class="text-muted mb-0">Add/Update categories.</p>
                        </div>
                    </div>

                    <div class="list-group-item list-group-item-action cursor-pointer" @onclick='() => Navigation.NavigateTo("settings/finance")'>
                        <div class="lign-items-center">
                            <strong class="mb-0">Finance Name</strong>
                            <p class="text-muted mb-0">Add/Update finance names.</p>
                        </div>
                    </div>
                   
                </div>

                <hr class="my-4" />
                <strong class="mb-0">UI Customisation</strong>
                <p>Customise the application looks.</p>

                <div class="list-group mb-5 shadow">
                    <div class="list-group-item list-group-item-action cursor-pointer" @onclick="updateUIMode">
                        <div class="align-items-center">
                            <strong class="mb-0">Dark/Light Mode</strong>
                            <p class="text-muted mb-0">Switch between dark or light mode.</p>
                        </div>
                    </div>
                </div>

                <hr class="my-4" />
                <strong class="mb-0">Export/Import Data</strong>
                <p>Export or import all data.</p>

                <div class="list-group mb-5 shadow">
                    <div class="list-group-item list-group-item-action cursor-pointer" @onclick="generateReport">
                        <div class="align-items-center">
                            <strong class="mb-0">Generate Report</strong>
                            <p class="text-muted mb-0">Generate a report. - Still under development.</p>
                        </div>
                    </div>
                    <div class="list-group-item list-group-item-action cursor-pointer" @onclick="exportData">
                        <div class="align-items-center">
                            <strong class="mb-0">Export Data</strong>
                            <p class="text-muted mb-0">Export all data to an Excel file.</p>
                        </div>
                    </div>
                    <div class="list-group-item list-group-item-action cursor-pointer" @onclick="importData">
                        <div class="align-items-center">
                            <strong class="mb-0">Import Data</strong>
                            <p class="text-muted mb-0">Existing data will be erased before importing the new data.</p>
                        </div>
                    </div>
                </div>

                <hr class="my-4" />
                <strong class="mb-0">Tester Function</strong>
                <p>Only available during the testing period.</p>

                <div class="list-group mb-5 shadow">
                    <div class="list-group-item list-group-item-action cursor-pointer" data-bs-toggle="modal" data-bs-target="#exampleModalCenter">
                        <div class="lign-items-center" >
                            <strong class="mb-0">Delete All Data</strong>
                            <p class="text-muted mb-0">Please perform this after an update.</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal" id="exampleModalCenter" tabindex="-1" aria-labelledby="exampleModalCenterTitle" aria-modal="true" role="dialog">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleModalCenterTitle">Delete all Data</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p class="text-break">
                    Are you sure you want to proceed with data deletion? This action is permanent and cannot be undone.
                    @FinPal.Services.DatabaseHelper.GetDatabasePath("SinarSQLite.db3")
                </p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" @onclick="DeleteData" class="btn btn-primary" data-bs-dismiss="modal">Proceed</button>
            </div>
        </div>
    </div>
</div>

@code {
    private string message;

    private async Task updateUIMode()
    {
        var result = await SettingDatabase.GetItemAsync("UIMode");
        result.SetStr = result.SetStr == "dark" ? "light" : "dark";
        await SettingDatabase.ChangeUIMode(result);
        await JS.InvokeVoidAsync("setTheme", result.SetStr);
    }

    private async void DeleteData()
    {
        CDatabase.DropTable();
        FDatabase.DropTable();
        SDatabase.DropTable();
        BDatabase.DropTable();
        await JS.InvokeVoidAsync("showToast", "Delete", "Data deleted.");
    }

    private async void exportData()
    {
        message = await ExcelHelper.ExportDataToExcel();
        await JS.InvokeVoidAsync("showToast", "Data Export", message);
    }

    private async void generateReport()
    {
        message = await ExcelHelper.GenerateExcelReport();
        await JS.InvokeVoidAsync("showToast", "Report Generation", message);
    }

    private async void importData()
    {

        var file = await FilePicker.PickAsync();

        if (file != null)
        {
            //DeleteData();

            using (var stream = await file.OpenReadAsync())
            {
                try
                {
                    await ExcelHelper.ImportDataFromExcel(stream);
                    message = "Data imported successfully!";
                }
                catch (Exception ex)
                {
                    message = $"Error importing data: {ex.Message}";
                }
            }
        }
        else
        {
            message = "No file selected.";
        }
        await JS.InvokeVoidAsync("showToast", "Data Import", message);
    }


   
}
