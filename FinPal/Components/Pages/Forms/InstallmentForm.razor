@page "/installment/form"
@inject InstallmentDatabase InsDatabase
@inject FinanceNameDatabase FnDatabase
@inject NavigationManager Navigation
<h3>Installment</h3>

<form>
    <div class="mb-3 position-relative">
        <label for="financeCode" class="form-label">Finance Name</label>
        <select class="form-select @(string.IsNullOrWhiteSpace(formModel.financeCode) ? "is-invalid" : "is-valid")" required @bind="formModel.financeCode">
            <option>Please Select</option>
            @foreach (var item in fnItems)
            {
                <option value="@item.Id">@item.Name</option>
            }
        </select>
        <div class="invalid-tooltip">
            Please select a valid finance name. If none is available, please create one in the Settings > Finance Name or click <a class="text-white" href="settings/finance">here</a>.
        </div>
    </div>
    <div class="mb-3 position-relative">
        <label for="itemName" class="form-label">Item Name</label>
        <input type="text" class="form-control @(string.IsNullOrWhiteSpace(formModel.itemName) ? "is-invalid" : "is-valid")" required id="itemName" @bind="formModel.itemName" placeholder="Enter item name" />
        <div class="invalid-tooltip">
            Please input the item name.
        </div>
    </div>
    <div class="mb-3 position-relative">
        <label for="totalPrice" class="form-label">Total Price</label>
        <input type="number" class="form-control @(formModel.totalPrice == 0 ? "is-invalid" : "is-valid" )" required id="totalPrice" @bind="formModel.totalPrice" @onblur="calculateTotal" @oninput="calculateTotal" placeholder="Enter Total Price" />
        <div class="invalid-tooltip">
            Price cannot be 0!
        </div>
    </div>
   
    <div class="mb-3 position-relative">
        <label for="period" class="form-label">Installment Period</label>
        <input type="number" class="form-control @(formModel.period < 1 ? "is-invalid" : "is-valid" )" id="period" @bind="formModel.period" @onblur="calculateTotal" @oninput="calculateTotal" placeholder="Enter Installment Period" />
        <div class="invalid-tooltip">
            Installment Period must be more than 1!
        </div>
    </div>
    <div class="mb-3">
        <label for="interest" class="form-label">Interest (%)</label>
        <input type="number" class="form-control" id="interest" @bind="formModel.interestRate" @onblur="calculateTotal" @oninput="calculateTotal" placeholder="Enter Interest (%)" />
    </div>
    
    <div class="mb-3">
        <label for="fee" class="form-label">Processsing/Admin Fees</label>
        <input type="number" class="form-control" id="fee" @bind="formModel.adminFee" @onblur="calculateTotal" @oninput="calculateTotal" placeholder="Enter Processsing/Admin Fees" />
    </div>
    <div class="mb-3 position-relative">
        <label for="monthlyInstallment" class="form-label">Monthly Installment</label>
        <input type="number" class="form-control @(formModel.monthlyInstallment == "0" || string.IsNullOrWhiteSpace(formModel.monthlyInstallment) ? "is-invalid" : "is-valid" )" id="monthlyInstallment" @bind="formModel.monthlyInstallment" placeholder="Total" />
        <div class="invalid-tooltip">
            Monthly installment cannot be 0!
        </div>
    </div>
    <div class="mb-3">
        <label for="startDate" class="form-label">Start Date</label>
        <input type="date" class="form-control" id="startDate" @bind="formModel.startDate" @onblur="setEndDate" @oninput="setEndDate" placeholder="Select Start Date" />
    </div>
    <div class="mb-3">
        <label for="endDate" class="form-label">End Date</label>
        <input type="date" class="form-control" id="endDate" @bind="formModel.endDate" placeholder="Select End Date" />
    </div>
    <div class="d-grid gap-2 d-md-flex justify-content-md-end my-5">
        <button type="button" @onclick="createInstallment" class="btn btn-primary">Submit</button>
        <a href="installment" class="btn btn-primary">Cancel</a>
    </div>
</form>

@code {
    private List<SinarFinance.Models.FinanceName> fnItems = new List<SinarFinance.Models.FinanceName>();
    private FormModel formModel = new FormModel
    {
        financeCode = "",
        period = 1,
        startDate = DateTime.Today, 
        endDate = DateTime.Today
    };
    
    protected override async Task OnInitializedAsync()
    {
        fnItems = await FnDatabase.GetItemsAsync();
    }

    private async Task createInstallment()
    {
        if (!string.IsNullOrWhiteSpace(formModel.financeCode) && !string.IsNullOrWhiteSpace(formModel.itemName) && formModel.totalPrice != 0 && formModel.period > 0)
        {
            var installment = new Installment 
            {
                    FinanceCode = Convert.ToInt32(formModel.financeCode),
                    ItemName = formModel.itemName,
                    Price = formModel.totalPrice,
                    Period = formModel.period,
                    Interest = formModel.interestRate,
                    Fees = formModel.adminFee,
                    Monthly = Convert.ToDecimal(formModel.monthlyInstallment),
                    StartDate = formModel.startDate,
                    EndDate = formModel.endDate
            };
            await InsDatabase.SaveItemAsync(installment);
            Navigation.NavigateTo("/installment");
        }
    }

    private void setEndDate()
    {
        formModel.endDate = formModel.startDate.AddMonths(formModel.period - 1);
    }

    private void calculateTotal()
    {
        decimal principal = formModel.totalPrice + formModel.adminFee;

        if (formModel.interestRate != 0)
        {
            // Interest rate
            decimal intRate = formModel.interestRate / 100;

            // Monthly installment calculation
            decimal rawMonthlyInstallment = principal * (intRate * (decimal)Math.Pow((double)(1 + intRate), formModel.period)) /
                ((decimal)Math.Pow((double)(1 + intRate), formModel.period) - 1);

            double tempMonthlyInstallment = (double)rawMonthlyInstallment;
            formModel.monthlyInstallment = tempMonthlyInstallment.ToString("F2");
        }

    }

    private class FormModel
    {
        public string? financeCode { get; set; }
        public string? itemName { get; set; }
        public string? monthlyInstallment { get; set; }
        public decimal totalPrice { get; set; }
        public decimal interestRate { get; set; }
        public decimal adminFee { get; set; }
        public int period { get; set; }
        public DateTime startDate { get; set; }
        public DateTime endDate { get; set; }
    }
}
