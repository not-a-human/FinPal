@inject CategoryDatabase CDatabase
@inject FinanceNameDatabase FDatabase
@inject BillDatabase BDatabase
@inject SalaryDatabase SDatabase
@inject IJSRuntime JS
@inject NavigationManager Navigation

@using System.Diagnostics
@page "/"

<SectionContent SectionName="page-title">Welcome back, palz!</SectionContent>
<SectionContent SectionName="page-actions">
    <i class="bi bi-question-lg h5 cursor-pointer m-0 px-2" onclick="helpFileToggle()"></i>
</SectionContent>
<SectionContent SectionName="top-panel-footer">
    <div class="top-panel-footer">
        <div class="row text-center">
            <div class="col-3">
                <i class="bi bi-arrow-left-circle-fill h6 cursor-pointer" @onclick="PreviousMonth"></i>
            </div>
            <div class="col-6">@GetSelectedMonth()</div>
            <div class="col-3">
                <i class="bi bi-arrow-right-circle-fill h6 cursor-pointer" @onclick="NextMonth"></i>
            </div>
        </div>
    </div>
</SectionContent>

<div class="mt-4 mt-xl-1">

    <!-- Content Row -->
    <div class="row">

        <div class="col-xl-3 col-6 mb-2 mb-md-4">
            <div class="card border-left-primary shadow h-100 py-md-2 cursor-pointer" @onclick='() => Navigation.NavigateTo("/salary")'>
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-md-2">
                            <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">
                                Earnings
                            </div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">$@salaryMonth</div>
                        </div>
                        <div class="col-auto d-none d-md-block">
                            <i class="bi bi-calendar fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-6 mb-2 mb-md-4">
            <div class="card border-left-success shadow h-100 py-md-2 cursor-pointer" @onclick='() => Navigation.NavigateTo("/salary")'>
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-md-2">
                            <div class="text-xs font-weight-bold text-success text-uppercase mb-1">
                                Earnings (@selectedYear)
                            </div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">$@salaryAnnual</div>
                        </div>
                        <div class="col-auto d-none d-md-block">
                            <i class="bi bi-currency-dollar fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-6 mb-2 mb-md-4">
            <div class="card border-left-warning shadow h-100 py-md-2 cursor-pointer" @onclick='() => Navigation.NavigateTo("/bills")'>
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-md-2">
                            <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">
                                Total Recurring Items
                            </div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">@billsCount</div>
                        </div>
                        <div class="col-auto d-none d-md-block">
                            <i class="bi bi-receipt fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-6 mb-2 mb-md-4">
            <div class="card border-left-info shadow h-100 py-md-2 cursor-pointer" @onclick='() => Navigation.NavigateTo("/bills")'>
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-md-2">
                            <div class="text-xs font-weight-bold text-info text-uppercase mb-1">
                                Total Items
                            </div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">$@bItems.Sum(b => b.AmountDue)</div>
                        </div>
                        <div class="col-auto d-none d-md-block">
                            <i class="bi bi-credit-card fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

    </div>

    <div class="row justify-content-center">

        <div class="col-xl-4 col-lg-5 mb-md-4 mb-2">
            <div class="card shadow h-100">
                <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                    <h6 class="m-0 font-weight-bold home-widget-title-color">Plan Overview</h6>
                </div>
                <div class="card-body position-relative">
                    <div class="@(planItems.Any() ? "d-none": "d-flex") w-100 h-100 position-absolute top-0 left-0 align-items-center justify-content-center text-center">
                        <b>Please configure the categories to display this widget correctly.</b>
                    </div>
                    <div class="row">
                        <div class="col-lg-12 col-5 mobile-no-padding">
                            <div class="chart-pie pt-lg-4 pb-lg-2">
                                <canvas id="myPlanChart"></canvas>
                            </div>
                        </div>
                        <div id="planChartLegend" class="mt-lg-4 col-lg-12 col-7 mobile-no-padding d-flex small mobile-small-text"></div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-8 col-lg-7 mb-md-4 mb-2">
            <div class="card shadow h-100">
                <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                    <h6 class="m-0 font-weight-bold home-widget-title-color">Allocated vs Total</h6>
                </div>
                <div class="card-body position-relative" style="min-height: 150px;">
                    @if (salaryMonth <= 0 || !planItems.Any())
                    {
                        <div class="d-flex w-100 h-100 position-absolute top-0 left-0 align-items-center justify-content-center text-center" style="z-index:100;background-color:var(--dark-color);opacity:0.8;color:white;">
                            <div>
                                @if (!planItems.Any())
                                {
                                    <b>Please configure the categories to display this widget correctly.</b>
                                }
                                else if(salaryMonth <= 0)
                                {
                                    <b>Please configure the selected month's salary to display this widget correctly.</b>
                                }
                            </div>
                        </div>
                    }
                    <ul class="list-group">
                        @foreach (var item in aItems)
                        {
                            @if (GetAllocatedPercent(item.funds, totalCategory(item.Id)) == 0)
                            {
                                <li class="list-group-item border-0">
                                    <div class="d-flex align-content-between">
                                        <div class="flex-fill">@item.Name</div>
                                        <div>@item.funds.ToString("0.00")</div>
                                    </div>
                                    <div class="progress" role="progressbar" aria-label="Basic example" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100">
                                        <div class="progress-bar bg-primary" style="width: 100%;">
                                            @totalCategory(item.Id)
                                        </div>
                                    </div>
                                </li>
                            }
                            else
                            {
                                <li class="list-group-item border-0" data-bs-toggle="collapse" data-bs-target="#collapse-finance-@item.Id" aria-expanded="false" aria-controls="collapse-finance-@item.Id">
                                    <div class="d-flex align-content-between">
                                        <div class="flex-fill">@item.Name</div>
                                        <div>@item.funds.ToString("0.00")</div>
                                    </div>
                                    <div class="progress" role="progressbar" aria-label="Basic example" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100">
                                        <div class="progress-bar @GetProgressBarBg(GetAllocatedPercent(item.funds,totalCategory(item.Id)))"
                                            style="width: 
                                                @GetPercentString(GetAllocatedPercent(item.funds,totalCategory(item.Id)));">
                                        @totalCategory(item.Id)
                                        </div>
                                    </div>
                                    <ul class="list-group mt-1 collapse" id="collapse-finance-@item.Id">
                                        @foreach(var fItem in fItems.Where(i => i.CategoryId == item.Id).ToList())
                                        {
                                            @if (bItems.Where(i => i.FinanceCode == fItem.Id).Count() > 0)
                                            {
                                                <li class="list-group-item">
                                                    <div class="d-flex align-content-between">
                                                        <div class="flex-fill">@fItem.Name</div>
                                                        <div>@bItems.Where(i => i.FinanceCode == fItem.Id).Sum(i => i.AmountDue)</div>
                                                    </div>
                                                </li>
                                            }
                                        }
                                    </ul>
                                </li>
                            }
                        }
                    </ul>
                </div>
            </div>
        </div>

    </div>
</div>

<SectionContent SectionName="help-title">Dashboard</SectionContent>
<SectionContent SectionName="help-body">
    <p class="card-text">This page provides an overview of the total amount that needs to be paid for the selected month and year, along with additional details.</p>
    <hr />
    <h5 class="card-title">EARNINGS</h5>
    <p class="card-text">Displays the salary for the selected month and year.</p>
    <hr />
    <h5 class="card-title">EARNINGS (YEAR)</h5>
    <p class="card-text">Displays the total salary for the selected year.</p>
    <hr />
    <h5 class="card-title">TOTAL RECURRING ITEMS</h5>
    <p class="card-text">Shows the total count of recurring items.</p>
    <hr />
    <h5 class="card-title">TOTAL ITEMS</h5>
    <p class="card-text">Displays the total cost of recurring items for the selected month and year.</p>
    <hr />
    <h5 class="card-title">PLAN OVERVIEW</h5>
    <p class="card-text">The chart shows the configured percentages for each category. These percentages can be modified on the Plan page.</p>
    <hr />
    <h5 class="card-title">ALLOCATED VS TOTAL</h5>
    <p class="card-text">The chart displays the allocated funds based on configured percentages and the total cost of recurring items for each category.</p>
</SectionContent>

@code {
    private List<FinPal.Models.JSChartArray> planItems = new List<FinPal.Models.JSChartArray>();
    private List<FinPal.Models.BillwithFC> bItems = new List<FinPal.Models.BillwithFC>();
    private List<FinPal.Models.FinanceName> fItems = new List<FinPal.Models.FinanceName>();
    private List<FinPal.Models.AllocatedFunds> aItems = new List<FinPal.Models.AllocatedFunds>();
    private List<JSChartArray> categoryArray = new List<JSChartArray>();

    private int billsCount = 0;
    private decimal salaryAnnual = 0, salaryMonth = 0;

    private int currentYear = DateTime.Now.Year, currentMonth = DateTime.Now.Month;
    private int selectedYear, selectedMonth;
    private int maxMonths = 12; // Number of months forward allowed

    protected override async Task OnInitializedAsync()
    {
        selectedYear = currentYear;
        selectedMonth = currentMonth;
        planItems = await CDatabase.GetPlanChartAsync();
        fItems = await FDatabase.GetItemsAsync();

        await LoadData();

        await JS.InvokeVoidAsync("pieChart", "myPlanChart", "planChartLegend", planItems, salaryMonth);
    }

    private async Task LoadData()
    {
        bItems = await BDatabase.GetItemsWithFCThisMonthAsync(selectedYear, selectedMonth);
        billsCount = await BDatabase.GetActiveCountAsync(selectedYear, selectedMonth);
        aItems = await CDatabase.GetAllocatedFundsAsync();
        salaryAnnual = await SDatabase.SumSalariesByYear(selectedYear);
        salaryMonth = await SDatabase.GetSalaryByMonth(selectedYear, selectedMonth);

        UpdateChart();
    }

    private void UpdateChart()
    {
        categoryArray = bItems
        .GroupBy(e => e.CategoryCode)
        .Select(g => new JSChartArray
            {
                Id = Int32.Parse(g.Key),
                Name = g?.Select(z => z.CName).FirstOrDefault() ?? "",
                Value = g?.Sum(e => e.AmountDue) ?? 0

            }).ToList();
    }

    private decimal totalCategory(int Id)
    {
        return categoryArray.Where(x => x.Id == Id).Select(z => z.Value).FirstOrDefault();
    }

    private int GetAllocatedPercent(decimal funds, decimal totalBill)
    {
        if(totalBill != 0 && funds != 0)
            return Convert.ToInt32(totalBill/funds*100);
        return 0;
    }

    private string GetProgressBarBg(int percentage)
    {
        if (percentage > 90)
            return "bg-danger";
        else if (percentage > 75)
            return "bg-warning";
        
        return "bg-success";
    }

    private string GetPercentString(int percentage)
    {
        return Convert.ToString(percentage) + "%";
    }

    private async Task PreviousMonth()
    {
        // Calculate the minimum allowed month and year
        int minYear = currentYear - (currentMonth + (12 - maxMonths + 1)) / 12;
        int minMonth = (currentMonth - maxMonths + 1) % 12;
        if (minMonth <= 0)
        {
            minMonth += 12;
            minYear--;
        }

        if (selectedYear > minYear || (selectedYear == minYear && selectedMonth > minMonth))
        {
            selectedMonth--;
            if (selectedMonth < 1)
            {
                selectedMonth = 12;
                selectedYear--;
            }
            await LoadData();
        }
    }

    private async Task NextMonth()
    {
        // Restrict selection to no later than the maxMonths forward
        int maxYear = currentYear + (currentMonth + maxMonths - 1) / 12;
        int maxMonth = (currentMonth + maxMonths - 1) % 12;

        if (maxMonth == 0)
        {
            maxMonth = 12;
            maxYear--;
        }

        if (selectedYear < maxYear || (selectedYear == maxYear && selectedMonth < maxMonth))
        {
            selectedMonth++;
            if (selectedMonth > 12)
            {
                selectedMonth = 1;
                selectedYear++;
            }
            await LoadData();
        }
    }
    private string GetSelectedMonth()
    {
        return $"{new DateTime(selectedYear, selectedMonth, 1):MMM yyyy}";
    }
}