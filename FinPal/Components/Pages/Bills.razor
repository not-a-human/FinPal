@page "/bills"
@inject BillDatabase BDatabase
@inject NavigationManager Navigate
@inject IJSRuntime JS

<SectionContent SectionName="page-title">Recurring Items</SectionContent>
<SectionContent SectionName="page-actions">
    <i class="bi bi-question-lg h5 cursor-pointer m-0 px-2" onclick="helpFileToggle()"></i>
    <i class="bi bi-three-dots-vertical h5 cursor-pointer m-0 px-2" data-bs-toggle="dropdown" aria-expanded="false"></i>
</SectionContent>
<SectionContent SectionName="dropdown-menu-items">
    <ul class="dropdown-menu dropdown-menu-dark">
        @if (ActiveRecord)
        {
            <li @onclick='ToggleActive'><a class="dropdown-item"><i class="bi bi-check-square"></i> Active</a></li>
        }
        else
        {
            <li @onclick='ToggleActive'><a class="dropdown-item"><i class="bi bi-square"></i> Inactive</a></li>
        }
    </ul>
</SectionContent>


    @if(!bItems.Any())
    {
        <div class="d-flex justify-content-center align-content-center">
            @if (!NoBill)
            {
                <div class="lds-ring"><div></div><div></div><div></div><div></div></div>
            }
        </div>
    }
    else
    {
        <div class="row justify-content-center px-1">
            @foreach (var item in FilteredItems)
            {
                <div class="card my-2 col-xl-10 col-12 p-0 cursor-pointer" @onclick="() => UpdateBill(item.Id)">
                <div class="card-body position-relative">
                        <div class="row" >
                            <div class="col-12 col-md-9">
                                <h5 class="card-title">@UIHelper.TruncateString(item.ItemName, 20)</h5>
                                <h6 class="card-subtitle mb-2 text-body-secondary">@item.FName</h6>
                                <p class="card-text">
                                    <ul class="row bill-ul">
                                        @if (!item.Continuous)
                                        {
                                            <li class="col-auto p-1"><i class="bi bi-calendar-fill me-2"></i> @item.StartDate.ToString("yyyy-MMM") - @item.EndDate.ToString("yyyy-MMM")</li>
                                            <li class="col-auto p-1">
                                                <i class="bi bi-repeat me-2"></i>
                                                @BDatabase.intervalSting(item.Repeat)
                                                @if (item.Repeat != "N")
                                                {
                                                    <i class="bi bi-x mx-1"></i>

                                                    @item.Period
                                                }
                                            </li>
                                        }
                                        else
                                        {
                                            <li><i class="bi bi-repeat me-2"></i> Continuous Billing</li>
                                        }
                                    </ul>
                                </p>
                            </div>
                            <div class="col-md-3 col-12 row align-items-center bill-price">
                                <h1 class="col p-0 m-0 pt-md-0 pt-2 text-end">@item.AmountDue <i class="bi bi-currency-dollar text-gray-300"></i></h1>
                            </div>
                        </div>
                    </div>
                </div>

            }
        </div>
    }

<div class="btn-float btn btn-primary" @onclick="CreateBill">
    <i class="bi bi-plus-lg"></i>
</div>

<SectionContent SectionName="help-title">Recurring Items</SectionContent>
<SectionContent SectionName="help-body">
    <p class="card-text">This page allows you to create or update recurring items, such as bills, investments, savings, loans, and more.</p>
    <hr />
    <h5 class="card-title">Getting Started</h5>
    <p class="card-text">
        Before adding a new recurring item, ensure you have set up a Category and Finance Name:
        <ul>
            <li>Settings > Categories</li>
            <li>Settings > Finance Name</li>
        </ul>
    </p>
</SectionContent>

@code {
    private bool NoBill = false, ActiveRecord = true;
    private List<FinPal.Models.BillwithFC> bItems = new List<FinPal.Models.BillwithFC>();
    private List<FinPal.Models.BillwithFC> FilteredItems = new List<FinPal.Models.BillwithFC>();
    private List<int> ActiveFinances = new List<int>();


    protected override async Task OnInitializedAsync()
    {
        ActiveFinances = await BDatabase.GetActiveFinanceID();
        bItems = await BDatabase.GetItemsAsyncWithFC();
        await Task.Run(LoadBills);
    }

    private void LoadBills()
    {
        System.Threading.Thread.Sleep(500);
        LoadFilteredBills();
        NoBill = true;
    }

    private void LoadFilteredBills()
    {
        if (ActiveRecord)
        {
            FilteredItems = bItems.Where(i => i.Active == ActiveRecord && ActiveFinances.Contains(i.FinanceCode)).ToList();
        }
        else
        {
            FilteredItems = bItems.Where(i => i.Active == ActiveRecord || !ActiveFinances.Contains(i.FinanceCode)).ToList();
        }
    }

    private void UpdateBill(int id)
    {
        Navigate.NavigateTo("bills/form/" + id.ToString());
    }

    private void CreateBill(){
        Navigate.NavigateTo("bills/form");
    }

    private void ToggleActive()
    {
        ActiveRecord = !ActiveRecord;
        LoadFilteredBills();
    }

}
